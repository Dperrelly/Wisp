#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('game-thing:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log('listening on port: ' + port);
server.on('error', onError);
server.on('listening', onListening);


var io = require('socket.io')(server);

var players = [];
var things = [];
var spikes = [];

io.on('connection', function(socket){
    console.log('A new client has connected!');
    console.log(socket.id);

    socket.broadcast.emit('newPlayer', {sprite: 1, id: socket.id, x:-50, y:1});
    players.push({sprite: 1, id: socket.id, x:-50, y:1});

    socket.on('error', function(error){
      console.log(error);
    });

    socket.on('disconnect', function(){
        console.log(socket.id, 'disconnected');
        for(var i = 0; i < players.length; i++){
             if(players[i].id === socket.id) {
                  players.splice(i, 1);
                  io.sockets.emit('disconnect', socket.id);
                  break;
              }
        }
    });

    socket.on('populate', function(){
        socket.emit('populate', {things: things, players: JSON.stringify(players), spikes: spikes});
    });    

    socket.on('newThing', function(thing){
      things.push(thing);
      socket.broadcast.emit('newThing', thing);
    });

    socket.on('newSpike', function(spike){
      spikes.push(spike);
      socket.broadcast.emit('newSpike', spike);
    });

    socket.on('delete', function (click){
      clickX = click.clickX;
      clickY= click.clickY;
      for(var i = things.length - 1; i >=0; i--) {
        if(clickX > things[i].x && clickX < things[i].x + Number(things[i].width) &&
        clickY > things[i].y && clickY < things[i].y + Number(things[i].height)){
          things.splice(i, 1);
        }
      }
      for(i = spikes.length - 1; i >=0; i--) {
        if(clickX > spikes[i].x && clickX < spikes[i].x + Number(spikes[i].width) &&
        clickY > spikes[i].y && clickY < spikes[i].y + Number(spikes[i].height)){
          spikes.splice(i, 1);
        }
      }
      socket.broadcast.emit('delete', click);
    });

    socket.on('move', function(playerInfo){
      socket.broadcast.emit('move', playerInfo);
      for(var i = 0; i< players.length; i++){
          if(players[i].id === playerInfo.id) {
            players[i].sprite = playerInfo.sprite;
            players[i].x = playerInfo.x;
            players[i].y = playerInfo.y;
            break;
          }
        }
    });
 });
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
